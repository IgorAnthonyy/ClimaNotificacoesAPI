// <auto-generated />
using System;
using ClimaNotificacoesAPI.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClimaNotificacoesAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ClimaNotificacoesDBContext))]
    partial class ClimaNotificacoesDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClimaNotificacoesAPI.Domain.Entities.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("ClimaNotificacoesAPI.Domain.Entities.PrevisaoTempo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Condicao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<double>("TemperaturaMaxima")
                        .HasColumnType("float");

                    b.Property<double>("TemperaturaMinima")
                        .HasColumnType("float");

                    b.Property<double>("Umidade")
                        .HasColumnType("float");

                    b.Property<double>("VelocidadeVento")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.ToTable("PrevisaoTempos");
                });

            modelBuilder.Entity("ClimaNotificacoesAPI.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ClimaNotificacoesAPI.Domain.Entities.Cidade", b =>
                {
                    b.HasOne("ClimaNotificacoesAPI.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Cidades")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ClimaNotificacoesAPI.Domain.Entities.PrevisaoTempo", b =>
                {
                    b.HasOne("ClimaNotificacoesAPI.Domain.Entities.Cidade", "Cidade")
                        .WithMany("PrevisaoTempos")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("ClimaNotificacoesAPI.Domain.Entities.Cidade", b =>
                {
                    b.Navigation("PrevisaoTempos");
                });

            modelBuilder.Entity("ClimaNotificacoesAPI.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Cidades");
                });
#pragma warning restore 612, 618
        }
    }
}
